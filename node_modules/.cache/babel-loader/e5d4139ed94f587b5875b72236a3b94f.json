{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\");\nasync function Multisig(to, token_address, amount, note) {\n  const Multisigabi = require(\"../abi/Multisig.json\");\n  const Multisigaddr = \"0xb1e89A6F2eccf90b0c180f554323138F19ae0FC6\";\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  const contract_signer = new ethers.Contract(Multisigaddr, Multisigabi, signer);\n  const contract_provider = new ethers.Contract(Multisigaddr, Multisigabi, provider);\n  const input0 = \"\" + amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n  const submittxn = await contract_signer.submitTransaction(to, token_address, amount1, note, \"1\", {\n    gasLimit: 210000\n  });\n  const block = await provider.getBlockNumber();\n  const transferEvents = await contract_provider.on(\"SubmitTransaction\", (from, txindex, to) => {\n    let info = {\n      from: from,\n      txindex: txindex,\n      to: to\n    };\n    temp(info);\n  });\n  return transferEvents;\n\n  //   const confirmtxn  = await contract_signer.confirmTransaction()\n  //   const executetxn  = await contract_signer.executeTransaction()\n}\n_c = Multisig;\nconst temp = info => {\n  localStorage.setItem(\"temp\", info.txindex);\n};\nexport default Multisig;\nvar _c;\n$RefreshReg$(_c, \"Multisig\");","map":{"version":3,"names":["ethers","require","Multisig","to","token_address","amount","note","Multisigabi","Multisigaddr","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract_signer","Contract","contract_provider","input0","decimals0","amount1","utils","parseUnits","submittxn","submitTransaction","gasLimit","block","getBlockNumber","transferEvents","on","from","txindex","info","temp","localStorage","setItem"],"sources":["C:/Users/SAI CHARAN/OneDrive/Desktop/frontend/src/contracts/frontend-interaction/Multisig.js"],"sourcesContent":["const { ethers } = require(\"ethers\");\nasync function Multisig(to, token_address, amount, note) {\n  const Multisigabi = require(\"../abi/Multisig.json\");\n  const Multisigaddr = \"0xb1e89A6F2eccf90b0c180f554323138F19ae0FC6\";\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    signer\n  );\n  const contract_provider = new ethers.Contract(\n    Multisigaddr,\n    Multisigabi,\n    provider\n  );\n\n  const input0 = \"\" + amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n\n  const submittxn = await contract_signer.submitTransaction(\n    to,\n    token_address,\n    amount1,\n    note,\n    \"1\",\n    { gasLimit: 210000 }\n  );\n  const block = await provider.getBlockNumber();\n\n  const transferEvents = await contract_provider.on(\n    \"SubmitTransaction\",\n    (from, txindex, to) => {\n      let info = {\n        from: from,\n        txindex: txindex,\n        to: to,\n      };\n\n      temp(info);\n    }\n  );\n\n  return transferEvents;\n\n  //   const confirmtxn  = await contract_signer.confirmTransaction()\n  //   const executetxn  = await contract_signer.executeTransaction()\n}\n\nconst temp = (info) => {\n  localStorage.setItem(\"temp\", info.txindex);\n};\n\nexport default Multisig;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACpC,eAAeC,QAAQ,CAACC,EAAE,EAAEC,aAAa,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACvD,MAAMC,WAAW,GAAGN,OAAO,CAAC,sBAAsB,CAAC;EACnD,MAAMO,YAAY,GAAG,4CAA4C;EAEjE,MAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;EAC9C,MAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAS,EAAE;EAEnC,MAAMC,eAAe,GAAG,IAAIjB,MAAM,CAACkB,QAAQ,CACzCV,YAAY,EACZD,WAAW,EACXQ,MAAM,CACP;EACD,MAAMI,iBAAiB,GAAG,IAAInB,MAAM,CAACkB,QAAQ,CAC3CV,YAAY,EACZD,WAAW,EACXE,QAAQ,CACT;EAED,MAAMW,MAAM,GAAG,EAAE,GAAGf,MAAM;EAC1B,MAAMgB,SAAS,GAAG,IAAI;EACtB,MAAMC,OAAO,GAAGtB,MAAM,CAACuB,KAAK,CAACC,UAAU,CAACJ,MAAM,EAAEC,SAAS,CAAC;EAE1D,MAAMI,SAAS,GAAG,MAAMR,eAAe,CAACS,iBAAiB,CACvDvB,EAAE,EACFC,aAAa,EACbkB,OAAO,EACPhB,IAAI,EACJ,GAAG,EACH;IAAEqB,QAAQ,EAAE;EAAO,CAAC,CACrB;EACD,MAAMC,KAAK,GAAG,MAAMnB,QAAQ,CAACoB,cAAc,EAAE;EAE7C,MAAMC,cAAc,GAAG,MAAMX,iBAAiB,CAACY,EAAE,CAC/C,mBAAmB,EACnB,CAACC,IAAI,EAAEC,OAAO,EAAE9B,EAAE,KAAK;IACrB,IAAI+B,IAAI,GAAG;MACTF,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEA,OAAO;MAChB9B,EAAE,EAAEA;IACN,CAAC;IAEDgC,IAAI,CAACD,IAAI,CAAC;EACZ,CAAC,CACF;EAED,OAAOJ,cAAc;;EAErB;EACA;AACF;AAAC,KAlDc5B,QAAQ;AAoDvB,MAAMiC,IAAI,GAAID,IAAI,IAAK;EACrBE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACD,OAAO,CAAC;AAC5C,CAAC;AAED,eAAe/B,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}