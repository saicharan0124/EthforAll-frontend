{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\");\nasync function Crowdfund_pledge(id, amount, token_address) {\n  const Crowdfund_launch_abi = require(\"../abi/Crowdfunding.json\");\n  const erc20abi = require(\"../abi/IERC20.json\");\n  const Crowdfundaddr = \"0x81e49Fde3A9306c60727a707e1Fa5820671D271B\";\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  const contract_signer = new ethers.Contract(Crowdfundaddr, Crowdfund_launch_abi, signer);\n  const erc20_signer = new ethers.Contract(token_address, erc20abi, signer);\n  const contract_provider = new ethers.Contract(Crowdfundaddr, Crowdfund_launch_abi, provider);\n  const input0 = \"\" + amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n  const approvetoken = await erc20_signer.approve(Crowdfundaddr, amount1);\n  const pledge = await contract_signer.pledge(id, amount1, {\n    gasLimit: 210000\n  });\n  //   const confirmtxn  = await contract_signer.confirmTransaction()\n  //   const executetxn  = await contract_signer.executeTransaction()\n}\n_c = Crowdfund_pledge;\nexport default Crowdfund_pledge;\nvar _c;\n$RefreshReg$(_c, \"Crowdfund_pledge\");","map":{"version":3,"names":["ethers","require","Crowdfund_pledge","id","amount","token_address","Crowdfund_launch_abi","erc20abi","Crowdfundaddr","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract_signer","Contract","erc20_signer","contract_provider","input0","decimals0","amount1","utils","parseUnits","approvetoken","approve","pledge","gasLimit"],"sources":["C:/Users/SAI CHARAN/OneDrive/Desktop/frontend/src/contracts/frontend-interaction/Crowdfund_pledge.js"],"sourcesContent":["const { ethers} = require(\"ethers\");\nasync function  Crowdfund_pledge(id,amount,token_address){\n\n    \n\n   \n    \n    const Crowdfund_launch_abi = require(\"../abi/Crowdfunding.json\")\n    const erc20abi=require(\"../abi/IERC20.json\")\n    const Crowdfundaddr = \"0x81e49Fde3A9306c60727a707e1Fa5820671D271B\";\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  const contract_signer = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    signer\n  );\n\n  const erc20_signer = new ethers.Contract(\n    token_address,\n    erc20abi,\n    signer\n  );\n  const contract_provider = new ethers.Contract(\n    Crowdfundaddr,\n    Crowdfund_launch_abi,\n    provider\n  );\n\n  const input0 = \"\"+amount;\n  const decimals0 = \"18\";\n  const amount1 = ethers.utils.parseUnits(input0, decimals0);\n\n\n  const approvetoken= await erc20_signer.approve(Crowdfundaddr,amount1)\n\n  \n  const pledge =await contract_signer.pledge(id,amount1,{gasLimit: 210000})\n//   const confirmtxn  = await contract_signer.confirmTransaction()\n//   const executetxn  = await contract_signer.executeTransaction()\n\n\n\n}\n\n\n\nexport default Crowdfund_pledge;"],"mappings":"AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACnC,eAAgBC,gBAAgB,CAACC,EAAE,EAACC,MAAM,EAACC,aAAa,EAAC;EAMrD,MAAMC,oBAAoB,GAAGL,OAAO,CAAC,0BAA0B,CAAC;EAChE,MAAMM,QAAQ,GAACN,OAAO,CAAC,oBAAoB,CAAC;EAC5C,MAAMO,aAAa,GAAG,4CAA4C;EAElE,MAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACrE,MAAMJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;EAC9C,MAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAS,EAAE;EAEnC,MAAMC,eAAe,GAAG,IAAIjB,MAAM,CAACkB,QAAQ,CACzCV,aAAa,EACbF,oBAAoB,EACpBS,MAAM,CACP;EAED,MAAMI,YAAY,GAAG,IAAInB,MAAM,CAACkB,QAAQ,CACtCb,aAAa,EACbE,QAAQ,EACRQ,MAAM,CACP;EACD,MAAMK,iBAAiB,GAAG,IAAIpB,MAAM,CAACkB,QAAQ,CAC3CV,aAAa,EACbF,oBAAoB,EACpBG,QAAQ,CACT;EAED,MAAMY,MAAM,GAAG,EAAE,GAACjB,MAAM;EACxB,MAAMkB,SAAS,GAAG,IAAI;EACtB,MAAMC,OAAO,GAAGvB,MAAM,CAACwB,KAAK,CAACC,UAAU,CAACJ,MAAM,EAAEC,SAAS,CAAC;EAG1D,MAAMI,YAAY,GAAE,MAAMP,YAAY,CAACQ,OAAO,CAACnB,aAAa,EAACe,OAAO,CAAC;EAGrE,MAAMK,MAAM,GAAE,MAAMX,eAAe,CAACW,MAAM,CAACzB,EAAE,EAACoB,OAAO,EAAC;IAACM,QAAQ,EAAE;EAAM,CAAC,CAAC;EAC3E;EACA;AAIA;AAAC,KA7Ce3B,gBAAgB;AAiDhC,eAAeA,gBAAgB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}